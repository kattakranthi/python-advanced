#List comprehensions are used to create lists by applying an expression to each item in an iterable.

#Dictionary comprehensions are used to create dictionaries by specifying key-value pairs and applying an expression to each item in an iterable.

#Set comprehensions are used to create sets by applying an expression to each item in an iterable.

Generator expressions are used to create generator objects for memory-efficient iteration.
numbers = [1, 2, 3, 4, 5]
squared_numbers = [x**2 for x in numbers]
# Output: [1, 4, 9, 16, 25]

numbers = [1, 2, 3, 4, 5]
even_numbers = [x for x in numbers if x % 2 == 0]
# Output: [2, 4]

#List Comprehension with Function
def square(x):
    return x**2

numbers = [1, 2, 3, 4, 5]
squared_numbers = [square(x) for x in numbers]
# Output: [1, 4, 9, 16, 25]

pairs = [(x, y) for x in range(1, 4) for y in range(1, 4)]

print(pairs)
# Output: [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]

# Using a list comprehension
uppercase_names = [name.upper() for name in names]

print(uppercase_names)

# Create a list of numbers
numbers = [1, 2, 3, 4, 5]

# Use a list comprehension to create a new list where even numbers are squared, and odd numbers are cubed
transformed_numbers = [x**2 if x % 2 == 0 else x**3 for x in numbers]

print(transformed_numbers)
# Output: [1, 4, 27, 16, 125]

#Generator expressions
squares_gen = (x ** 2 for x in range(1, 6))

for square in squares_gen:
    print(square)

